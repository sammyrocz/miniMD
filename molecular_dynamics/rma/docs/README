**CHANGES**
    - Configuration file is never being updated during the simulation or analysis flow 
    - Configuration file is just used at initial setup phase of the communcation for creating buffers and intializing timers
    - Configuration file now includes extra column namely istemporal which specifies whether the analysis is temporal or not
    - Minidmd doesn't dump anything in the files hence analyis::adump and analyis::updateconfig are removed now
    - As opposed the previous case when every time step was written onto the file minidmd nows doesn't alaways transmitts the data
    - Minidmd now only transmitts the data according to the frequency specified in the config file but for the temporal case it always transmitts the data
    - Modalysis replicates the code snippet from minimd's integrate.cpp that defines when the analysis's writeAoutput method will be called  
      

Execution Flow 
    - Basic Setp 
        - Firstly we divide the MPI_COMM_WORLD into two seperate communicator ."universecomm" and "groupcomm" holds reference to these.
        - universecomm lets the process running minimd code to communicate between themselves and similarly for the modalysis hence its the comm between the same universe 
        - groupcomm allows to communicate among the universe (minidmd and modalysis)
        - communcator module is entirely responsible for the communicaton between minimd and modalysis
    - communcation
        - Both minimd and modalysis instatiate an object of communcator class
        - communcator defines a single public method namely communicate that requires the buffer and size that need to be transmitted


Entry points 
    - main.cpp (entire application)
    - ljs.cpp (minimd)
    - modalysis.cpp (modalysis)


The entire application is logically divided into three parts
    -   minidmd application
    -   modalysis application
    -   helper modules ( that enables the communcation between minimd and modalysis)



Helper Modules
    Helper modules is designed to initialize as well as progress the communcation. It consists following files
    
    - util.h 
        - It defines utility fucntions like splitting the universe and creating groups its being used by the universecomm and groupcomm
    
    - universecomm.h
        - It defines a class named "UniverseComm" and consists of a MPI_Comm variable
        - It is desgined using singleton design pattern that allows only one object to instatiate throught the execution  
        - Beacuse of this singleton desgin where you try to instatiate the object the same object will retuned hence 
          the same MPI_Comm
        - This MPI_Comm is responsible for the communcation between the universe itself (intracommunication)
    
    - groupcomm.h 
        - It defines a class named "GroupComm" and consists of a MPI_Comm variable
        - It is desgined using singleton design pattern that allows only one object to instatiate throught the execution  
        - Beacuse of this singleton desgin where you try to instatiate the object the same object will retuned 
          hence the same MPI_Comm 
        - This MPI_Comm is responsible for the communcation between the universe (Intercommunicaton)
        - The total of processes in the group will be defined by the ratio so if ratio is 2:1 then the number processes 
          in the group comm would be 3 and if there 15 total no processes there will be 10 simulation and 5 analyis process and there 5 group comm     

    - communcator.cpp
        - It defines a class named "Communcator"
        - It consists of an array named acount which holds the count of the atoms within the group
        - It have a static variable namely "commtype" which represents the communcation type to be RMA(1) or SEND (0)
        - It exposes a function "communicate" that allows communcation among the two universe